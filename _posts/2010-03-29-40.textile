---
title: GitHub Rebase 40
layout: post
---

Time for another GitHub Rebase, covering some of the latest and greatest projects that make their home here on GitHub. "Let me know":http://rebase.github.com/howto.html if yours should be on a future edition!

p=. !http://github.com/downloads/rebase/rebase.github.com/smk-git.jpg!

h3. Featured Project

*"ioctocat":http://github.com/dbloete/ioctocat* is your soon to be newest installed iPhone/iPod app for GitHub. Watch your news feed just like on your dashboard, browse repositories, view commit diffs, manage your issues, search the hub, and stalk your favorite hackers. "The project's website":http://dbloete.github.com/ioctocat/ has a great little demo that you can click through if you're not convinced yet. iOctocat "made an appearance":http://github.com/blog/425-ioctocat-on-your-iphone on the GitHub blog nearly a year ago, but now with a larger user/contributer base along with keeping up with the latest features from the "GitHub API":http://develop.github.com the project definitely deserves some time in the spotlight. Perhaps we'll see an iPadOctocat too in the coming weeks?

h3. Notably New Projects

*"monque":http://github.com/kurtiss/monque* is a "MongoDB":http://github.com/mongodb/mongo and Python-based alternative to both "Resque":http://github.com/defunkt/resque, that uses Ruby and Redis, and "Dreque":http://github.com/samuel/dreque, a Python port. If your app is already based in MongoDB, it may make the most sense to not add another dependency by just using the same database. If you haven't looked into MongoDB or how to use it in this kind of scenario, the code is a great example of using "pymongo":http://api.mongodb.org/python/1.5.1%2B/index.html and atomic updates with Mongo's "findandmodify":http://www.mongodb.org/display/DOCS/findandmodify+Command command.

p=. "!http://github.com/downloads/rebase/rebase.github.com/rit.png!":http://github.com/briandoll/Rit

*"Rit":http://github.com/briandoll/Rit* rejects the concept of a CMS and instead opts for a "content scheduling system" built with Rails. Instead of focusing on how your content is delivered and managed, Rit solves "where and when":http://emphaticsolutions.com/2010/02/20/rit-the-anti-CMS-content-scheduling-system-in-Rails.html to release your content by providing webservice like hooks for other applications to consume content, for example with the "rit_client":http://github.com/briandoll/rit_client. Rit dishes up content in "plates" that are served up at specific times with a given layout. The project's "wiki":http://wiki.github.com/briandoll/Rit/using-rit has a great tutorial and use case scenario and the "release announcement":http://emphaticsolutions.com/2010/02/20/rit-the-anti-CMS-content-scheduling-system-in-Rails.html shows off some of the motivation behind the system.

*"fancy":http://github.com/bakkdoor/fancy* is a new dynamic language inspired by Ruby, Smalltalk, and Erlang that is making its first steps here on GitHub. The syntax is still under heavy construction but plenty is working already, including loops, closures, and package/class definitions. Some examples of what Fancy code looks like lives on the "project's wiki.":http://www.fancy-lang.org/wiki/index.php/Introductions/Syntax_and_Semantics What's more important is the "support for concurrency":http://www.fancy-lang.org/wiki/index.php/Introductions/Actor_Model with the Actor model, and "pattern matching":http://www.fancy-lang.org/wiki/index.php/Introductions/Pattern_Matching. Fancy is currently built with C++, using bison, flex, and "BoehmGC":http://www.hpl.hp.com/personal/Hans_Boehm/gc/. This will definitely be a project to watch.

*"web.go":http://github.com/hoisie/web.go* is a small "Go":http://golang.org library for writing web apps. Easily define GET/POST routes with strings or regular expressions, hook up cookies and user sessions, have your favorite web server forward requests over scgi/fastcgi, and the best part: it's compiled to native code for your hardware so it'll be extremely fast. There's no template support built in but you could hook up "mustache.go":http://github.com/hoisie/mustache.go quite easily. Check out the "tutorial":http://www.getwebgo.com/tutorial to get started.

p=. "!http://github.com/downloads/rebase/rebase.github.com/tuk-solo.jpg!":http://github.com/tukz/Tukui

*"Tukui":http://github.com/tukz/Tukui* is a minimalistic World of Warcraft UI replacement that I'm sure more than our "Level 80 Support Druid":http://github.com/tekkub can appreciate. Like the other WoW addons, this is done completely in "Lua":http://www.lua.org/, which definitely deserves more attention outside of the scope of programmable, dynamic user interfaces. For screenshots and more you can check out "Tukui's site":http://www.tukui.org/home/ or this "spotlight review":http://www.worldofraids.com/topic/13597-ui-spotlight-tukui/?s=2726216aa3cabcc830338f1fb0a94781.
